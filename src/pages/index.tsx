import type { NextPage } from "next";
import Head from "next/head";
import { useState, DragEvent } from "react";
import { Agent, Tier } from "../contexts/AgentTierContext";
import { useAgentTier } from "../hooks/useAgentTier";

const Home: NextPage = () => {
  const [transferAgent, setTransferAgent] = useState<Agent>();
  const [prevTier, setPrevTier] = useState<Tier>();

  const { onChangeTier, state } = useAgentTier();

  const handleOnDrop = (tier: Tier) => (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    console.log("ON DROP");
    if (!transferAgent || state[tier].includes(transferAgent)) return;

    onChangeTier({
      tier,
      transferAgent,
      prevTier,
    });
  };

  const handleOnDragEnd = () => {
    setTransferAgent(undefined);
    setPrevTier(undefined);
  };

  const handleDragStart = (agent: Agent, tier?: Tier) => {
    setTransferAgent(agent);
    setPrevTier(tier);
  };

  return (
    <div className="hero min-h-screen bg-base-200">
      <Head>
        <title>Valorant | Tier List</title>
        <meta
          name="Valorant | Tier List"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="hero-content bg-primary flex-col w-4/5 h-5/6 align-top">
        {(Object.entries(state) as Array<[Tier, Agent[]]>).map(
          ([tier, agents]) => {
            if (tier && tier !== "available")
              return (
                <div
                  key={tier}
                  className="w-full bg-secondary h-20 flex flex-row"
                  onDragOver={(e) => e.preventDefault()}
                  onDrop={handleOnDrop(tier)}
                >
                  <div className="tier ">{tier}</div>

                  {agents.map((agent) => (
                    <div
                      key={`${tier}-${agent}`}
                      draggable
                      onDragStart={() => {
                        handleDragStart(agent, tier);
                      }}
                      onDragEnd={handleOnDragEnd}
                    >
                      {agent}
                    </div>
                  ))}
                </div>
              );
          }
        )}
        <div className="flex flex-row">
          {state.available.map((agent) => (
            <div
              draggable
              onDragEnd={handleOnDragEnd}
              onDragStart={() => {
                handleDragStart(agent);
              }}
              key={agent}
            >
              {agent}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Home;
