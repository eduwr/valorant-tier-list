import type { NextPage } from "next";
import Head from "next/head";
import { useState, useReducer, Reducer, DragEvent } from "react";
import { Hello } from "../components/Hello";

type Agent = string;
type Tier = "S" | "A" | "B" | "C" | "D" | "available";

type State = Record<Tier, Agent[]>;

enum ActionKind {
  ADD_AGENT = "ADD_AGENT",
  REMOVE_AGENT = "REMOVE_AGENT",
}

type Action = {
  type: ActionKind;
  payload: {
    agent: Agent;
    tier: Tier;
  };
};

const agentsData: Agent[] = ["Phoenix", "Jett"];

const initialState: State = {
  S: [],
  A: [],
  B: [],
  C: [],
  D: [],
  available: agentsData,
};

const reducer: Reducer<State, Action> = (state, action) => {
  switch (action.type) {
    case ActionKind.ADD_AGENT:
      return {
        ...state,
        [action.payload.tier]: [
          ...state[action.payload.tier],
          action.payload.agent,
        ],
        available: state.available.filter(
          (agent) => agent !== action.payload.agent
        ),
      };
    case ActionKind.REMOVE_AGENT:
      return {
        ...state,
        [action.payload.tier]: state[action.payload.tier].filter(
          (agent) => agent !== action.payload.agent
        ),
        available: [...state.available, action.payload.agent],
      };
    default:
      throw new Error("Unkown action");
  }
};

const Home: NextPage = () => {
  const [state, dispatch] = useReducer(reducer, initialState);

  const [transferAgent, setTransferAgent] = useState<Agent>();

  const handleOnDrop = (tier: Tier) => (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (!transferAgent || state[tier].includes(transferAgent)) return;

    dispatch({
      type: ActionKind.ADD_AGENT,
      payload: {
        tier,
        agent: transferAgent,
      },
    });
  };

  const handleOnDragEnter = (tier: Tier) => (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (!transferAgent || state[tier].includes(transferAgent)) return;

    dispatch({
      type: ActionKind.ADD_AGENT,
      payload: {
        tier,
        agent: transferAgent,
      },
    });
  };

  const handleOnDragLeave = (tier: Tier) => (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (!transferAgent) return;

    dispatch({
      type: ActionKind.REMOVE_AGENT,
      payload: {
        tier,
        agent: transferAgent,
      },
    });
  };

  const handleOnDragEnd = () => setTransferAgent(undefined);

  return (
    <div className="hero min-h-screen bg-base-200">
      <Head>
        <title>Valorant | Tier List</title>
        <meta
          name="Valorant | Tier List"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="hero-content bg-primary flex-col w-4/5 h-5/6 align-top">
        {(Object.entries(state) as Array<[Tier, Agent[]]>).map(
          ([tier, agents]) => {
            if (tier && tier !== "available")
              return (
                <div
                  className="w-full bg-secondary h-20 flex flex-row"
                  onDragOver={(e) => e.preventDefault()}
                  onDrop={handleOnDrop(tier)}
                  onDragEnter={handleOnDragEnter(tier)}
                  onDragLeave={handleOnDragLeave(tier)}
                  key={tier}
                >
                  <div className="tier ">{tier}</div>

                  {agents.map((agent) => (
                    <div
                      key={agent}
                      draggable
                      onDragStart={(e) => {
                        setTransferAgent(agent);
                      }}
                      onDragEnd={handleOnDragEnd}
                    >
                      {agent}
                    </div>
                  ))}
                </div>
              );
          }
        )}
        <div className="flex flex-row">
          {state.available.map((agent) => (
            <div
              draggable
              onDragEnd={handleOnDragEnd}
              onDragStart={(e) => {
                setTransferAgent(agent);
                console.log(e);
              }}
              key={agent}
            >
              {agent}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Home;
